<?php

/**
 * Implements hook_help().
 *
 * Just the README passed through a markdown to HTML converter.
 */
function fau_block_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.fau_block':
      return <<<EOF
      <h1 id="legal-block-generator">Legal Block Generator</h1>
      <p>This module provides a configurable block that can serve as a footer.</p>
      <h2 id="configuration">Configuration</h2>
      <p>The block can be configured when adding it to the desired layout region.
      The configuration is grouped into different templates, which conist of:</p>
      <ul>
      <li><code>links</code>: These include links that are shown on the block.</li>
      <li><code>logos</code>: These are the logos that are shown on the block.</li>
      </ul>
      <h3 id="custom-templates">Custom Templates</h3>
      <p>The module already comes with some default configurations, but you can also define a template set that better fits your needs.
      To do so, just create a <code>templates.yaml</code> file in <code>public://dis_legal_block</code> (<code>public://</code> usually translates to <code>/sites/default/files/</code>) and stick to the template defined in this modules&#39; <code>/config/isntall/dis_legal_block.templates.yml</code>.</p>
      <p>The logos you use in the <code>logos</code> section should be located in the corresponding directory in <code>public://dis_legal_block</code>.</p>
      <p>Take this <code>templates.yaml</code> as an example:</p>
      <pre><code class="lang-yml"><span class="hljs-attribute">logos</span>:
        <span class="hljs-attribute">ReturnToMonkey</span>:
          - <span class="hljs-attribute">image</span>: monkey1.png
            <span class="hljs-attribute">alt</span>: Monkey
            <span class="hljs-attribute">url</span>: <span class="hljs-string">"https://monkey.com"</span>
            <span class="hljs-attribute">height</span>: <span class="hljs-number">185</span>
          - <span class="hljs-attribute">image</span>: monkey2.png
            <span class="hljs-attribute">alt</span>: Monkey
            <span class="hljs-attribute">url</span>: <span class="hljs-string">"https://monkey.com"</span>
            <span class="hljs-attribute">height</span>: <span class="hljs-number">185</span>
          - <span class="hljs-attribute">image</span>: monkey3.png
            <span class="hljs-attribute">alt</span>: Monkey
            <span class="hljs-attribute">url</span>: <span class="hljs-string">"https://monkey.com"</span>
            <span class="hljs-attribute">height</span>: <span class="hljs-number">185</span>
      </code></pre>
      <p>Note: Logos that are first in the <code>yaml</code> als come first in the block.</p>
      <p>Then your file tree should look like this:</p>
      <pre><code>dis_legal_block
          ├── ReturnToMonkey
          │   ├── monkey1<span class="hljs-selector-class">.png</span>
          │   ├── monkey2<span class="hljs-selector-class">.png</span>
          │   └── monkey3<span class="hljs-selector-class">.png</span>
          └── templates.yaml
      </code></pre><p>If you wish to reuse shipped logos like the CDI logo, just copy them to a custom template folder and use them accordingly.</p>
      <h3 id="remarks-">Remarks:</h3>
      <p>The block HTML is generated on block save. So in case the module gets updated the routine would be:</p>
      <ol>
      <li>Update the code via <code>git</code> or <code>composer</code> if available.</li>
      <li><code>drush cr</code> since that rebuilds the Twig caches to use the updated template.</li>
      <li>Save the block to rebuild the HTML using the new Twig template.</li>
      </ol>
      <p>Generally: In case the block is empty after saving just <code>drush cr</code> and save the block again.</p>
      EOF;
  }
}

function fau_block_theme($existing, $type, $theme, $path) {
  return [
    'block--fau_block--default' => [
      'variables' => [
        'height' => 0,
        'logos' => [],
        'links' => [],
      ],
    ],
    'block--fau_block--oin' => [
      'variables' => [
        'height' => 0,
        'logos' => [],
        'links' => [],
      ],
    ],
  ];
}